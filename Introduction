Processor Clock
Program Counter:
  With every falling edge ( or rising edge) the program counter is incremented by one.
  The content of PC is placed on the address bus to select specific memory location to 
  the data from. Along with the memory address, the processor (CPU) also sends a control signal 
  called memory read, to signal memory reading. When the memory device (RAM device) recieves the
  memory read signal, it releases the content of the memory location as indicated by the address bus
  on to its output buffer. The output buffer is connected to the databus of the CPU. So the data in
  the memory is transfered to the CPU. This is called instruction fetch.
  ( If the data is to be written out, memory write signal is generated by the processor. Similarly, it generates I/O read and I/O 
  write signla as well.)
  
Instruction Fetch, Decode and Execution:
   Once the instruction is in the processor, it is decoded and executed by the processor. This is mostly
   carried out by hardware and may be little bit of software. That means, the processor decodes the
   intruction (understands the instruction) and then executes the instruction (carry out what ever
   is told to by that instruction. This instruction could be:
    a) Fetch the operand from memory
    b) Add 2 registers.
    (This can be explained by an instruction like COPY ADDRESS1, REG C )
    
    All this gets finished in 1 instruction cycle (which is the widht of program clock). As the PC is
    incremented, next instruction cycle begins.
    
Program Flow Control:
    It appears from the above discussion that the program executing is linear. That is, PC is incremented
    ,instruction read, instruction decoded and executed, next instruction read and it goes on and on
    and on. Yes that is true, but it does not mean that there is no jump and loop in that executing.
    The jump, and looping is required to acomplish useful task. That is acomplished by loading
    a specific address value in PC to read next instruction from that address.
Bus Structure: 
Address bus, data bus and control bus: Nothing but lines carring signals. There realy is no control bus
because they are not as much of a group. Also, even though the architecture book distinguishes 
Internal Bus and External Bus, it is not like they are distinct. Same buses are used to interface 
internally within the processor and with external peripheral devices as well. And it is said in the book 
that Internal Bus synchronous while External Bus is asynchronous. Now that is true, however, it needs
to be seen context of control signal, especially how reading data from RAM is synchronized with PC, emmory
read/write signal and the instruction decode and execution within the processor.
Building Blocks of a Computer:
Digital Logic: From the processors point of view, software is nothing but sequential pattern of 
1's and 0's. And all the processing can be broken down into 2 modules:
   Data storage
   Data Flow Control.
    Out of these two, gate is the building block of flip flop. (Decide if we want to learn this Digital
    logic )
    
Microachitecture:
  Now, instead of transforming the software into the sequential pattern of 1s and 0s, this time we
  interpret it as a set of instructions executed by CPU. Examples of such instructions are:
  - Get a data from a given memory location into an accumulator
  - Add content of accumulator with content of another register
  - Store result of accumulator into a specific memory location.
  The processor is designed to carry out these type of simple instructions when presented in binary
  format (pattern of 1s and 0s ). That is what was refered to as decoding and executing earlier.
  The mechanism necessary to decode and execution may be designated as microarchitecture. Sometimes
  it is impleted completed by hardware (gates and flip flop) and sometimes special software with the
  help of hardware.
  
Processor can execute a program in main memory but not in secondary memory
As long as operational, processor continously fetches, decodes and executes insturction
after instruction and that's all it does. Nothing else.

Operating System:
  The operating system relieves the user program from the burden of interacting directly with 
  so many complexities of the the system hardware.  Thus the operating system controlls all the 
  resources of the computer in the form of hardware and software that controls it. The operating
  system interacts with the user program and carries out actions on behalf of the user program.
  
User's Program: Programs written in higher level languages like C, C++, Java etc. All application
programs, users commands, compilers, assemplers, linker, loader fall in this category.




